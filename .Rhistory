load("./data/NMA Dataset Binary.RData")
(data1 <- as.data.frame(one.stage.dataset.NMA[[2]]))
## Run for no MOD
(res.noMOD <- run.model(data = data1, measure = "OR", D = 1))
## Replace 'MOD' with NA
data.NA <- data1
data.NA["m1"] <- data.NA["m2"] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Load binary data
#load("./data/NMA Dataset Continuous.RData")
load("./data/NMA Dataset Binary.RData")
(data1 <- as.data.frame(one.stage.dataset.NMA[[2]]))
## Run for no MOD
(res.noMOD <- run.model.noMOD(data = data1, measure = "OR", D = 1))
## Replace 'MOD' with NA
data.NA <- data1
data.NA["m1"] <- data.NA["m2"] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
res.noMOD$EM.ref
improved$EM.ref
list.of.packages <- c("R2jags", "dplyr", "mcmcplots", "netmeta", "testit", "reshape2", "ggplot2", "ggrepel")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Load binary data
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Replace 'MOD' with NA
data.NA <- data1
data.NA["m1"] <- data.NA["m2"] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
exp(-0.037168349)
exp(0.06)
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
improved$EM.ref
res.noMOD$EM.ref
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
# Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
improved$EM.ref
res.noMOD$EM.ref
data.NA["m1"]
data.NA["m1"][1:2]
data.NA["m1"][1:2,]
(data1 <- as.data.frame(one.stage.dataset.NMA[[2]]))
data.NA <- data1
data.NA["m1"][1:2,] <- data.NA["m2"][1:2,] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
data.NA <- data1
data.NA["m1"][1:2,] <- data.NA["m2"][1:2,] <- NA; data.NA
(improved <- run.model.improved(data = data.NA, measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
(improved <- run.model.improved(data = data.NA[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
data.NA
## Replace 'MOD' with NA
data.NA <- data1
data.NA["m1"][2:3,] <- data.NA["m2"][2:3,] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.NA[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
data.NA
data.NA[, -17]
## Run for no MOD
(res.noMOD <- run.model.noMOD(data = data1[, -17], measure = "OR", D = 1))
## Replace 'MOD' with NA
data.NA <- data1
data.NA["m1"][2:3,] <- data.NA["m2"][4:5,] <- NA; data.NA
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.NA[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Replace 'MOD' with NA
data.minus <- data1
data.minus["m1"][2:3,] <- data.minus["m2"][4:5,] <- -1; data.minus
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
data.minus
data <- data.minus[, -17]
event <- data %>% dplyr::select(starts_with("r"))                               # Number of observed events in each arm of every trial
mod0 <- data %>% dplyr::select(starts_with("m"))                                # Number of missing participants in each arm of every trial
rand <- data %>% dplyr::select(starts_with("n"))                                # Number randomised participants in each arm of every trial
treat <- data %>% dplyr::select(starts_with("t"))                               # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])                                                        # Total number of included trials per network
mod0
mod <- ifelse(mod0 < 0, 0, mod0)
ind <- ifelse(mod0 < 0, 0, 1)
mod
mod0
ifelse(mod0 < 0, 0, 1)
ifelse(mod0 < 0, 0, mod0)
mod0
ifelse(mod0 < 0, 0, 1)
mod[mod0 < 0] <- mod0
mod
mod <- mod0
ind <- ifelse(mod0 < 0, 0, 1)
mod[mod < 0, ] <- mod0
mod[mod == -1] <- mod0
mod
mod <- mod0
mod[mod == -1] <- mod0
mod
ind <- ifelse(mod0 < 0, 0, 1)
mod <- mod0
mod[mod < 0] <- 0
mod
event <- data %>% dplyr::select(starts_with("r"))                               # Number of observed events in each arm of every trial
mod <- data %>% dplyr::select(starts_with("m"))                                # Number of missing participants in each arm of every trial
rand <- data %>% dplyr::select(starts_with("n"))                                # Number randomised participants in each arm of every trial
treat <- data %>% dplyr::select(starts_with("t"))                               # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])
ind <- ifelse(mod < 0, 0, 1)
mod[mod < 0] <- 0
ind
mod
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Replace 'MOD' with NA
data.minus <- data1
data.minus["m1"][2:3,] <- data.minus["m2"][4:5,] <- -1; data.minus
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
data.minus
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data1[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), D = 1))
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 0.5), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
data.minus <- data1
data.minus["m1"]<- data.minus["m2"] <- -1; data.minus
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
improved$EM.ref
## Run improved 'run.model' function
(improved <- run.model.improved(data = data1[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
list.of.packages <- c("R2jags", "dplyr", "mcmcplots", "netmeta", "testit", "reshape2", "ggplot2", "ggrepel")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_No MOD.R")
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/leverage.plot_function.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
data.minus
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
leverage.plot(net = improved, drug.names = c("A", "B", "C", "D", "E"), title.o = "Observed outcomes", title.m = "Missing outcome data")
sqrt(0.001)
sqrt(0.01)
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
data.minus <- data1
data.minus["m1"]<- data.minus["m2"] <- -1; data.minus
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
## Load function
source("D:/Ongoing Projects/21.003_Git Hub Projects/11_Methodological issues/Partial MOD Report/run.model_function_Improved.R")
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
res.noMOD$EM.ref[, 1] - improved$EM.ref[, 1]
## Replace 'MOD' with -1
data.minus <- data1
data.minus["m1"] <- -1; data.minus
## Run improved 'run.model' function
(improved <- run.model.improved(data = data.minus[, -17], measure = "OR", assumption = "HIE-ARM", heter.prior = list("halfnormal", 0, 2), D = 1))
data1
## Load libraries
list.of.packages <- c("devtools", "R2jags", "ggplot2", "dplyr", "mcmcplots", "reshape2", "ggfittext", "gemtc", "netmeta",
"BUGSnet", "pcnetmeta", "gridExtra", "stringr", "ggpubr", "ggrepel", "testit")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load all package material
devtools::load_all()
## Load 'rnmamod' library :-) (Only ONCE after running 'load_all()' for the first time in that day)
library(rnmamod)
## Use example in excel format
library(readxl)
(data.fas <- as.data.frame(read_excel("D:/Ongoing Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
(data.fas <- as.data.frame(read_excel("O:/Research Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
# Vector of unique intervention names
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
data.fas[, 4:6]
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
rnmamod::netplot(data.fas, drug.names = interv.names, show.bias = F)
## Network plots and summary (use BUGSnet for network characteristics)
rnmamod::netplot(data.fas, drug.names = interv.names, show.bias = T)
## Heatmap of trials to interventions with the risk of bias due to MOD
rnmamod::heatmap.mod(data = data.fas, trial.names = as.factor(1:21), drug.names = interv.names)
## Perform NMA-PMM using optional arguments only
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR",  heter.prior = list("halfnormal", 0, 1), D = 0))
data.fas
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## Check MCMC diagnostics
rnmamod::mcmc.diagnostics(par = c("tau", "EM[2,1]", "EM[3,1]"), data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1)
rnmamod::mcmc.diagnostics(par = c("tau", "EM[2,1]", "EM[3,1]"), data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1)
## Load all package material
devtools::load_all()
rnmamod::mcmc.diagnostics(par = c("tau", "EM[2,1]", "EM[3,1]"), data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1)
## Obtain the league heatmap (upper level CrI and lower Predictive Interval?)
rnmamod::league.heatmap(res1, drug.names = interv.names)
## Obtain the league heatmap for predictions & estimations (lower triangle) and effect estimates (upper triangle)
rnmamod::league.heatmap.pred(res1, drug.names = interv.names)
## Obtain ranking measures
rnmamod::rankosucra.plot(res1, drug.names = interv.names)
(node1 <- rnmamod::run.nodesplit(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::nodesplit.plot(node1, drug.names = interv.names, tau.values = c(0.53, 0.04, 1.37)) # tau.values refer to posterior median and 95% CrI in full NMA
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## Load all package material
devtools::load_all()
data.fas
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N"))
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## They will be loaded from the 'data' folder of the project
#load("./data/NMA Dataset Continuous.RData")             # Continuous NMAs
load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N"))
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data1
## Load libraries
list.of.packages <- c("devtools", "R2jags", "ggplot2", "dplyr", "mcmcplots", "reshape2", "ggfittext", "gemtc", "netmeta",
"BUGSnet", "pcnetmeta", "gridExtra", "stringr", "ggpubr", "ggrepel", "testit")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load all package material
devtools::load_all()
load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
#load("./data/NMA Dataset Continuous.RData")             # Continuous NMAs
load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H"))
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data <- data1[, -17]
## Binary: arm-level, wide-format dataset
(event <- data %>% dplyr::select(starts_with("r")))                             # Number of observed events in each arm of every trial
(mod <- data %>% dplyr::select(starts_with("m")))                               # Number of missing participants in each arm of every trial
(rand <- data %>% dplyr::select(starts_with("n")))                              # Number randomised participants in each arm of every trial
(treat <- data %>% dplyr::select(starts_with("t")))                             # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])                                                        # Total number of included trials per network
r <- m <- N <- t <- t0 <- treat
for(i in 1:ns){
t0[i, ] <- order(treat[i, ], na.last = T)
r[i, ] <- event[i, order(t0[i, ], na.last = T)]
m[i, ] <- mod[i, order(t0[i, ], na.last = T)]
N[i, ] <- rand[i, order(t0[i, ], na.last = T)]
t[i, ] <- sort(treat[i, ], na.last = T)
}
Numextract <- function(string){
unlist(regmatches(string,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",string)))
}
## Observed comparisons in the network
observed.comp0 <- improved.UME(t, m, N)$obs.comp
observed.comp <- matrix(Numextract(observed.comp0[, 1]), nrow = length(observed.comp0[, 1]), ncol = 2, byrow = T)
t1.obs.com <- as.numeric(as.character(observed.comp[, 1]))
t2.obs.com <- as.numeric(as.character(observed.comp[, 2]))
obs.comp <- paste0(t2.obs.com, "vs", t1.obs.com)
indic0 <- list()
for(i in 1:ns) {
indic0[[i]] <- combn(t(na.omit(t(t[i, ]))), 2)[, 1:(na[i] - 1)]
}
(indic <- unique(t(do.call(cbind, indic0))))
t1.indic <- indic[, 1]
t2.indic <- indic[, 2]
N.obs <- length(t1.indic)
N.obs
improved.UME(t, m, N)
max(na)
has_error(improved.UME(t, m, N)
has_error(improved.UME(t, m, N), silent = T)
has_error(improved.UME(t, m, N), silent = T)
mean.misspar <- rep(0.0001, 2)
heter.prior <- as.numeric(c(0, heter.prior[[3]], 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## Load all package material
devtools::load_all()
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(data.fas <- as.data.frame(read_excel("O:/Research Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
# Vector of unique intervention names
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data.fas
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H"))
rnmamod::netplot(data1[, -17], drug.names = interv.names, show.bias = F) # data[, -17] excludes the column on the number of arms; it is data[, -21] for continuous
rnmamod::netplot(data1[, -17], drug.names = interv.names, show.bias = F) # data[, -17] excludes the column on the number of arms; it is data[, -21] for continuous
rnmamod::netplot(data1[, -17], drug.names = interv.names, show.bias = T) # data[, -17] excludes the column on the number of arms; it is data[, -21] for continuous
rnmamod::heatmap.mod(data = data1[, -17], trial.names = as.factor(1:62), drug.names = interv.names)
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 1, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1))
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5), D = 1))
rnmamod::mcmc.diagnostics(par = c("tau", "EM[2,1]", "EM[3,1]"), data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, D = 1, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1)
rnmamod::league.heatmap(res1, drug.names = c("A", "B", "C", "D", "E", "F", "G", "H"))
rnmamod::league.heatmap.pred(res1, drug.names = c("A", "B", "C", "D", "E", "F", "G", "H"))
rnmamod::rankosucra.plot(res1, drug.names = c("A", "B", "C", "D", "E", "F", "G", "H"))
(node1 <- rnmamod::run.nodesplit(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::nodesplit.plot(node1, drug.names = c("A", "B", "C", "D", "E", "F", "G", "H"), tau.values = c(0.15, 0.02, 0.34)) # tau.values refer to posterior median and 95% CrI in full NMA
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)
warnings()
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)
(res.sens <- rnmamod::run.sensitivity(data = data1, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
(res.sens <- rnmamod::run.sensitivity(data = data1, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
## Load all package material
devtools::load_all()
(res.sens <- rnmamod::run.sensitivity(data = data1, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
drug.names.alloc(drug.names = interv.names)
rnmamod::balloon.plot.mod(sens = res.sens, compar = 1, outcome = "binary", D = 1, drug.names = interv.names)
(robust <- rnmamod::robustness.index(sens = res.sens, primary.scenar = 13, threshold = 0.28, nt = length(interv.names)))
(robust <- rnmamod::robustness.index(sens = res.sens, primary.scenar = 13, threshold = 0.28, nt = length(interv.names)))
(res.sens <- rnmamod::run.sensitivity(data = data1, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::balloon.plot.mod(sens = res.sens, compar = 1, outcome = "binary", D = 1, drug.names = interv.names)
(robust <- rnmamod::robustness.index(sens = res.sens, primary.scenar = 13, threshold = 0.28, nt = length(interv.names)))
rnmamod::heatmap.robustness(robust = robust, drug.names = interv.names, threshold = 0.28)
# Use the function 'drug.names.alloc(drug.names)' to define the argument 'compar'
rnmamod::barplot.KLD(robust = robust, compar = 1, outcome = "binary", drug.names = interv.names)
(reg1 <- rnmamod::run.metareg(data = data1[, -17], covariate = rnorm(62, 0, 1), measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1))
library(readxl)
#(data.fas <- as.data.frame(read_excel("D:/Ongoing Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
(data.fas <- as.data.frame(read_excel("O:/Research Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
# Vector of unique intervention names
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR",  heter.prior = list("halfnormal", 0, 1), D = 0))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data.fas
(res.sens <- rnmamod::run.sensitivity(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 0, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::balloon.plot.mod(sens = res.sens, compar = 2, outcome = "binary", D = 0, drug.names = interv.names)
(robust <- rnmamod::robustness.index(sens = res.sens, primary.scenar = 2, threshold = 0.28, nt = length(interv.names)))
rnmamod::heatmap.robustness(robust = robust, drug.names = interv.names, threshold = 0.28)
rnmamod::barplot.KLD(robust = robust, compar = 1, outcome = "binary", drug.names = interv.names)
(res1 <- rnmamod::run.metareg(data = data.fas, covariate = as.factor(rep(c(0, 1), c(8, 21 - 8))), measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1))
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data.fas
(ume1 <- rnmamod::run.UME(data = data.fas[, -c(4, 5, 6)], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data <- data.fas
## Binary: arm-level, wide-format dataset
(event <- data %>% dplyr::select(starts_with("r")))                             # Number of observed events in each arm of every trial
(mod <- data %>% dplyr::select(starts_with("m")))                               # Number of missing participants in each arm of every trial
(rand <- data %>% dplyr::select(starts_with("n")))                              # Number randomised participants in each arm of every trial
(treat <- data %>% dplyr::select(starts_with("t")))                             # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])                                                        # Total number of included trials per network
data
data <- data.fas
data
(event <- data %>% dplyr::select(starts_with("r")))                             # Number of observed events in each arm of every trial
(mod <- data %>% dplyr::select(starts_with("m")))                               # Number of missing participants in each arm of every trial
(rand <- data %>% dplyr::select(starts_with("n")))                              # Number randomised participants in each arm of every trial
(treat <- data %>% dplyr::select(starts_with("t")))                             # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])                                                        # Total number of included trials per network
r <- m <- N <- t <- t0 <- treat
for(i in 1:ns){
t0[i, ] <- order(treat[i, ], na.last = T)
r[i, ] <- event[i, order(t0[i, ], na.last = T)]
m[i, ] <- mod[i, order(t0[i, ], na.last = T)]
N[i, ] <- rand[i, order(t0[i, ], na.last = T)]
t[i, ] <- sort(treat[i, ], na.last = T)
}
Numextract <- function(string){
unlist(regmatches(string,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",string)))
}
observed.comp0 <- improved.UME(t, m, N)$obs.comp
observed.comp <- matrix(Numextract(observed.comp0[, 1]), nrow = length(observed.comp0[, 1]), ncol = 2, byrow = T)
t1.obs.com <- as.numeric(as.character(observed.comp[, 1]))
t2.obs.com <- as.numeric(as.character(observed.comp[, 2]))
obs.comp <- paste0(t2.obs.com, "vs", t1.obs.com)
obs.comp
observed.comp
observed.comp0
indic0 <- list()
for(i in 1:ns) {
indic0[[i]] <- combn(t(na.omit(t(t[i, ]))), 2)[, 1:(na[i] - 1)]
}
(indic <- unique(t(do.call(cbind, indic0))))
t1.indic <- indic[, 1]
t2.indic <- indic[, 2]
N.obs <- length(t1.indic)
t1.indic
t2.indic
improved.UME(t, m, N)
obs.comp
t
t1.indic
t2.indic
N.obs
obs.comp
indic
improved.UME(t, m, N)
t
improved.UME(t, m, N)
max(na)
has_error(improved.UME(t, m, N), silent = T)
impr.UME$t1.bn
impr.UME <- improved.UME(t, m, N)
impr.UME$t1.bn
impr.UME$t2.bn
impr.UME$base
impr.UME$nbase.multi
t2.indic
t1.indic
N.obs
obs.comp
indic
## Load all package material
devtools::load_all()
(ume1 <- rnmamod::run.UME(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## Present results from the unrelated mean effects model
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)

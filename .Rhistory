load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H"))
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5), net.ref = 1, D = 1))
(meta1 <- rnmamod::run.separate.meta(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5)))
rnmamod::separate.meta.plot(full = res1, meta = meta1, drug.names = interv.names)
(node1 <- rnmamod::run.nodesplit(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
data = data1[, -17]
## Binary: arm-level, wide-format dataset
(event <- data %>% dplyr::select(starts_with("r")))                             # Number of observed events in each arm of every trial
(mod <- data %>% dplyr::select(starts_with("m")))                               # Number of missing participants in each arm of every trial
(rand <- data %>% dplyr::select(starts_with("n")))                              # Number randomised participants in each arm of every trial
(treat <- data %>% dplyr::select(starts_with("t")))                             # Intervention studied in each arm of every trial
na <- apply(treat, 1, function(x) length(which(!is.na(x))))                     # Number of interventions investigated in every trial per network
nt <- length(table(as.matrix(treat)))                                           # Total number of interventions per network
ns <- length(event[, 1])                                                        # Total number of included trials per network
## Order by 'id of t1' < 'id of t1'
r <- m <- N <- t <- t0 <- treat
for(i in 1:ns){
t0[i, ] <- order(treat[i, ], na.last = T)
r[i, ] <- event[i, order(t0[i, ], na.last = T)]
m[i, ] <- mod[i, order(t0[i, ], na.last = T)]
N[i, ] <- rand[i, order(t0[i, ], na.last = T)]
t[i, ] <- sort(treat[i, ], na.last = T)
}
## Unique comparisons with the baseline intervention
## A function to extract numbers from a character. Source: http://stla.github.io/stlapblog/posts/Numextract.html
Numextract <- function(string){
unlist(regmatches(string,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",string)))
}
## Observed comparisons in the network
observed.comp0 <- improved.UME(t, m, N)$obs.comp
observed.comp <- matrix(Numextract(observed.comp0[, 1]), nrow = length(observed.comp0[, 1]), ncol = 2, byrow = T)
t1.obs.com <- as.numeric(as.character(observed.comp[, 1]))
t2.obs.com <- as.numeric(as.character(observed.comp[, 2]))
obs.comp <- paste0(t2.obs.com, "vs", t1.obs.com)
## Keep only comparisons with the baseline intervention
indic0 <- list()
for(i in 1:ns) {
indic0[[i]] <- combn(t(na.omit(t(t[i, ]))), 2)[, 1:(na[i] - 1)]
}
(indic <- unique(t(do.call(cbind, indic0))))
t1.indic <- indic[, 1]
t2.indic <- indic[, 2]
N.obs <- length(t1.indic)
devtools::load_all()
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
drug.names = interv.names
node <- node1; full <- res1
tau.values <- full$tau[c(3, 5, 7)]
## Keep results on 'direct evidence', 'indirect evidence', 'inconsistency factor', 'between-trial standard deviation',
## and model assessment measures (i.e., DIC, posterior mean of refisual deviance, and pD)
direct0 <- node$direct; indirect0 <- node$EM; IF0 <- node$diff; tau0 <- node$tau; model.assess <- node$model.assessment
direct0
## Sort 'direct evidence', 'indirect evidence', 'inconsistency factor', and 'between-trial standard deviation' by DIC in ascending order
direct <- direct0[order(model.assess$DIC), ]
indirect <- indirect0[order(model.assess$DIC), ]
IF <- IF0[order(model.assess$DIC), ]
tau <- tau0[order(model.assess$DIC), ]
## Interventions' name: Replace code with original names
# For treat1 (non-baseline arm)
for(i in sort(unique(unlist(direct[, 1])))) {
direct[direct$treat1 == i, 1] <- drug.names[i]
}
# For treat2 (baseline arm)
for(i in sort(unique(unlist(direct[, 2])))) {
direct[direct$treat2 == i, 2] <- drug.names[i]
}
## Create a table on the direct, indirect and IF per split node
CrI.direct <- paste0("c(", direct[, 5], ",", " ", direct[, 6], ")", ifelse(as.numeric(direct[, 5]) > 0 | as.numeric(direct[, 6]) < 0, "*", " "))
CrI.indirect <- paste0("c(", indirect[, 5], ",", " ", indirect[, 6], ")", ifelse(as.numeric(indirect[, 5]) > 0 | as.numeric(indirect[, 6]) < 0, "*", " "))
CrI.IF <- paste0("c(", IF[, 5], ",", " ", IF[, 7], ")", ifelse(as.numeric(IF[, 5]) > 0 | as.numeric(IF[, 6]) < 0, "*", " "))
CrI.direct <- paste0("c(", direct[, 5], ",", " ", direct[, 6], ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " "))
CrI.direct
direct
round(paste0("c(", direct[, 5], ",", " ", direct[, 6], ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " ")), 2)
paste0("c(", round(direct[, 5], 2), ",", " ", round(direct[, 6], 2), ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " "))
IF
## Create a table on the direct, indirect and IF per split node
CrI.direct <- paste0("c(", round(direct[, 5], 2), ",", " ", round(direct[, 6], 2), ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " "))
CrI.indirect <- paste0("c(", round(indirect[, 5], 2), ",", " ", round(indirect[, 6], 2), ")", ifelse(indirect[, 5] > 0 | indirect[, 6] < 0, "*", " "))
CrI.IF <- paste0("c(", round(IF[, 5], 2), ",", " ", round(IF[, 6], 2), ")", ifelse(IF[, 5] > 0 | IF[, 6] < 0, "*", " "))
data.frame(direct[, 1:2], round(direct[, 3:4], 2), CrI.direct, round(indirect[, 3:4], 2), CrI.indirect, round(IF[, 3:4], 2), CrI.IF)
model.assess
model.assess.sort <- model.assess[order(model.assess$DIC), ]
model.assess.sort
tau
dat.frame(comp, round(model.assess.sort[, -c(1:2)], 2) )
## Create a table on the model assessment measures and between-trial standard deviation per split node
data.frame(comp, round(model.assess.sort[, -c(1:2)], 2) )
round(model.assess.sort[, -c(1:2)], 2)
comp
## Prepare the dataset to create the panel of forest-plot on the 'direct evidence', 'indirect evidence', and 'inconsistency factor' for each split node
comp <- paste(direct[, 1], "vs", direct[, 2])
prepare <- data.frame(rep(comp, 3), rbind(direct[, c(3, 5:6)], indirect[, c(3, 5:6)], IF[, c(3, 5:6)]), rep(c("direct", "indirect", "IF"), each = length(direct[, 1])))
colnames(prepare) <- c("node", "mean", "lower", "upper", "evidence")
prepare$stat.signif <- ifelse(prepare$lower > 0 | prepare$upper < 0  , "statistically significant", "statistically non-significant")
prepare$stat.signif <- ifelse(prepare$evidence != "IF", NA, prepare$stat.signif)
prepare$DIC <- sort(model.assess$DIC)
## Create a table on the model assessment measures and between-trial standard deviation per split node
data.frame(comp, round(model.assess.sort[, -c(1:2)], 2) )
## Create a table on the model assessment measures and between-trial standard deviation per split node
data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:6], 2))
devtools::load_all()
(node1 <- rnmamod::run.nodesplit(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
CrI.tau
drug.names = interv.names
node <- node1; full <- res1
tau.values <- full$tau[c(3, 5, 7)]
## Keep results on 'direct evidence', 'indirect evidence', 'inconsistency factor', 'between-trial standard deviation',
## and model assessment measures (i.e., DIC, posterior mean of refisual deviance, and pD)
direct0 <- node$direct; indirect0 <- node$EM; IF0 <- node$diff; tau0 <- node$tau; model.assess <- node$model.assessment
## Sort 'direct evidence', 'indirect evidence', 'inconsistency factor', and 'between-trial standard deviation' by DIC in ascending order
direct <- direct0[order(model.assess$DIC), ]
indirect <- indirect0[order(model.assess$DIC), ]
IF <- IF0[order(model.assess$DIC), ]
tau <- tau0[order(model.assess$DIC), ]
model.assess.sort <- model.assess[order(model.assess$DIC), ]
## Interventions' name: Replace code with original names
# For treat1 (non-baseline arm)
for(i in sort(unique(unlist(direct[, 1])))) {
direct[direct$treat1 == i, 1] <- drug.names[i]
}
# For treat2 (baseline arm)
for(i in sort(unique(unlist(direct[, 2])))) {
direct[direct$treat2 == i, 2] <- drug.names[i]
}
## Prepare the dataset to create the panel of forest-plot on the 'direct evidence', 'indirect evidence', and 'inconsistency factor' for each split node
comp <- paste(direct[, 1], "vs", direct[, 2])
prepare <- data.frame(rep(comp, 3), rbind(direct[, c(3, 5:6)], indirect[, c(3, 5:6)], IF[, c(3, 5:6)]), rep(c("direct", "indirect", "IF"), each = length(direct[, 1])))
colnames(prepare) <- c("node", "mean", "lower", "upper", "evidence")
prepare$stat.signif <- ifelse(prepare$lower > 0 | prepare$upper < 0  , "statistically significant", "statistically non-significant")
prepare$stat.signif <- ifelse(prepare$evidence != "IF", NA, prepare$stat.signif)
prepare$DIC <- sort(model.assess$DIC)
CrI.direct <- paste0("c(", round(direct[, 5], 2), ",", " ", round(direct[, 6], 2), ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " "))
CrI.indirect <- paste0("c(", round(indirect[, 5], 2), ",", " ", round(indirect[, 6], 2), ")", ifelse(indirect[, 5] > 0 | indirect[, 6] < 0, "*", " "))
CrI.IF <- paste0("c(", round(IF[, 5], 2), ",", " ", round(IF[, 6], 2), ")", ifelse(IF[, 5] > 0 | IF[, 6] < 0, "*", " "))
table.EM <- data.frame(comp, round(direct[, 3:4], 2), CrI.direct, round(indirect[, 3:4], 2), CrI.indirect, round(IF[, 3:4], 2), CrI.IF)
colnames(table.EM) <- c("Comparisons", "Post. mean dir.", "Post. SD dir.", "95% CrI dir.", "Post. mean indir", "Post. SD indir.", "95% CrI indir.",
"Post. mean IF", "Post. SD IF", "95% CrI IF")
table.EM
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
CrI.tau
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3], 2), CrI.tau)
table.assess
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
table.assess
model.assess.NMA <- full$model.assessment
model.assess.NMA
tau.values
full$tau
tau.values <- full$tau[c(5, 2, 3, 7)]
model.assess.NMA <- full$model.assessment
tau.values
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
rbind("NMA", round(model.assess.NMA, 2), tau.values[1:2], paste0("c(", round(tau.values[, 3], 2), ",", " ", round(tau.values[, 4], 2), ")"))
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
model.assess.NMA
model.assess.sort
round(model.assess.NMA[c(1, 3, 2)], 2)
tau.values[1:2]
paste0("c(", round(tau.values[, 3], 2), ",", " ", round(tau.values[, 4], 2), ")")
paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")")
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
rbind("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
table.assess
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
add <- c("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
rbind(add, table.assess)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- c("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
add
add <- cbind("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
add
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
add <- cbind("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
add
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
add
round(model.assess.NMA[c(1, 3, 2)], 2)
tau.values[1:2]
paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")")
rbind(add, table.assess)
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1:2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
add
tau.values
tau.values[1:2]
paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")")
tau.values[1:2]
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1], tau.values[2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
add
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), tau.values[1], tau.values[2], paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
model.assess
model.assess.sort[, 3]
model.assess.NMA
model.assess.sort[, 3] - model.assess.NMA[1]
model.assess.sort[, 3]
model.assess.sort[, 3] - model.assess.NMA[1]
model.assess.NMA[1]
model.assess.sort[, 3] - rep(model.assess.NMA[1], length(model.assess.sort[, 3]))
rep(model.assess.NMA[1], length(model.assess.sort[, 3])
rep(model.assess.NMA[1], length(model.assess.sort[, 3]))
model.assess.NMA[1]
rep(model.assess.NMA$DIC, length(model.assess.sort[, 3]))
## Find whether at least one split node improve the fit of the model
model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3]))
## Find whether at least one split node improve the fit of the model
data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
model.assess.sort[, 3]
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
model.selection$improve <- ifelse(DIC.diff > 5 | DIC.diff < -5, "TRUE", "FALSE")
colnames(model.selection) <- c("Comparison", "DIC.diff", "improve")
ifelse(DIC.diff > 5 | DIC.diff < -5, "TRUE", "FALSE")
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection$improve <- ifelse(DIC.diff > 5 | DIC.diff < -5, "TRUE", "FALSE")
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection$improve <- ifelse(model.selection$DIC.diff > 5 | model.selection$DIC.diff < -5, "TRUE", "FALSE")
model.selection
subset(model.selection[, 1], improve == T)
## Find whether at least one split node improve the fit of the model
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection$improve <- ifelse(model.selection$DIC.diff > 5 | model.selection$DIC.diff < -5, "TRUE", "FALSE")
subset(model.selection, improve == T)
subset(model.selection, improve == T)["Comparison"]
subset(model.selection, improve == F)["Comparison"]
c(subset(model.selection, improve == F)["Comparison"])
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection$improve <- ifelse(model.selection$DIC.diff > 5, "NMA", ifelse(model.selection$DIC.diff < -5, "Node", "neither"))
message(ifelse(model.selection$improve == "Node", paste("The fit of the model is improved after removing node(s)", c(subset(model.selection, improve == "Node")["Comparison"]), "when accounting for model fit and complexity"),
ifelse(model.selection$improve == "NMA", "The consistency model may be preferred when accounting for model fit and complexity",
"There is little to choose between the two models")))
model.selection
message(ifelse(model.selection$improve == "Node", paste("The fit of the model is improved after removing node(s)", c(subset(model.selection, improve == "Node")["Comparison"]), "when accounting for model fit and complexity"),
"There is little to choose between the two models"))
model.selection
model.selection$improve == "Node"
## Find whether at least one split node improve the fit of the model
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
model.selection$Better.fit <- ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose"))
Better.fit <- ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose"))
Better.fit
Better.fit <- rbind(NA, ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose")))
Better.fit
Better.fit <- c(NA, ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose")))
Better.fit
## Find whether at least one split node improve the fit of the model
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
Better.fit <- c(ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose")))
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), Better.fit, round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "Better fit", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), NA, round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
# Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), Better.fit, round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Comparison", "DIC", "Post. mean dev.", "pD", "DIC-based better fit", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), NA, round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
devtools::load_all()
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
devtools::load_all()
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
node <- node1; full <- res1
drug.names = interv.names
tau.values <- full$tau[c(5, 2, 3, 7)]
model.assess.NMA <- full$model.assessment
## Keep results on 'direct evidence', 'indirect evidence', 'inconsistency factor', 'between-trial standard deviation',
## and model assessment measures (i.e., DIC, posterior mean of refisual deviance, and pD)
direct0 <- node$direct; indirect0 <- node$EM; IF0 <- node$diff; tau0 <- node$tau; model.assess <- node$model.assessment
## Sort 'direct evidence', 'indirect evidence', 'inconsistency factor', and 'between-trial standard deviation' by DIC in ascending order
direct <- direct0[order(model.assess$DIC), ]
indirect <- indirect0[order(model.assess$DIC), ]
IF <- IF0[order(model.assess$DIC), ]
tau <- tau0[order(model.assess$DIC), ]
model.assess.sort <- model.assess[order(model.assess$DIC), ]
## Interventions' name: Replace code with original names
# For treat1 (non-baseline arm)
for(i in sort(unique(unlist(direct[, 1])))) {
direct[direct$treat1 == i, 1] <- drug.names[i]
}
# For treat2 (baseline arm)
for(i in sort(unique(unlist(direct[, 2])))) {
direct[direct$treat2 == i, 2] <- drug.names[i]
}
## Prepare the dataset to create the panel of forest-plot on the 'direct evidence', 'indirect evidence', and 'inconsistency factor' for each split node
comp <- paste(direct[, 1], "vs", direct[, 2])
prepare <- data.frame(rep(comp, 3), rbind(direct[, c(3, 5:6)], indirect[, c(3, 5:6)], IF[, c(3, 5:6)]), rep(c("direct", "indirect", "IF"), each = length(direct[, 1])))
colnames(prepare) <- c("node", "mean", "lower", "upper", "evidence")
prepare$stat.signif <- ifelse(prepare$lower > 0 | prepare$upper < 0  , "statistically significant", "statistically non-significant")
prepare$stat.signif <- ifelse(prepare$evidence != "IF", NA, prepare$stat.signif)
prepare$DIC <- sort(model.assess$DIC)
## Create a table on the direct, indirect and IF per split node
CrI.direct <- paste0("c(", round(direct[, 5], 2), ",", " ", round(direct[, 6], 2), ")", ifelse(direct[, 5] > 0 | direct[, 6] < 0, "*", " "))
CrI.indirect <- paste0("c(", round(indirect[, 5], 2), ",", " ", round(indirect[, 6], 2), ")", ifelse(indirect[, 5] > 0 | indirect[, 6] < 0, "*", " "))
CrI.IF <- paste0("c(", round(IF[, 5], 2), ",", " ", round(IF[, 6], 2), ")", ifelse(IF[, 5] > 0 | IF[, 6] < 0, "*", " "))
table.EM <- data.frame(comp, round(direct[, 3:4], 2), CrI.direct, round(indirect[, 3:4], 2), CrI.indirect, round(IF[, 3:4], 2), CrI.IF)
colnames(table.EM) <- c("Comparisons", "Post. mean dir.", "Post. SD dir.", "95% CrI dir.", "Post. mean indir", "Post. SD indir.", "95% CrI indir.",
"Post. mean IF", "Post. SD IF", "95% CrI IF")
## Find whether at least one split node improve the fit of the model
model.selection <- data.frame(comp, model.assess.sort[, 3] - rep(model.assess.NMA$DIC, length(model.assess.sort[, 3])))
colnames(model.selection) <- c("Comparison", "DIC.diff")
Better.fit <- c(ifelse(model.selection$DIC.diff > 5, "Consistency model", ifelse(model.selection$DIC.diff < -5, "After split node", "Little to choose")))
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), Better.fit, round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Approach", "DIC", "Post. mean dev.", "pD", "DIC-based better fit", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), NA, round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), Better.fit, round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Approach", "DIC", "Post. mean dev.", "pD", "DIC-based better fit", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), "-", round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
table.assess
## Create a table on the model assessment measures and between-trial standard deviation per split node
CrI.tau <- paste0("c(", round(tau[, 5], 2), ",", " ", round(tau[, 6], 2), ")")
table.assess <- data.frame(comp, round(model.assess.sort[, -c(1:2)], 2), Better.fit, round(tau[, 3:4], 2), CrI.tau)
colnames(table.assess) <- c("Approach", "DIC", "Post. mean dev.", "pD", "DIC-based better fit", "Post. median tau", "Post. SD tau", "95% CrI tau")
add <- data.frame("NMA", round(model.assess.NMA[c(1, 3, 2)], 2), "-", round(tau.values[1], 2), round(tau.values[2], 2), paste0("c(", round(tau.values[3], 2), ",", " ", round(tau.values[4], 2), ")"))
colnames(add) <- colnames(table.assess)
rbind(add, table.assess)
table.assess
devtools::load_all()
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
devtools::load_all()
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
devtools::load_all()
## Load libraries
list.of.packages <- c("devtools", "R2jags", "ggplot2", "dplyr", "mcmcplots", "reshape2", "ggfittext", "gemtc", "netmeta",
"BUGSnet", "pcnetmeta", "gridExtra", "stringr", "ggpubr", "ggrepel", "testit", "writexl")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load all package material
devtools::load_all()
## Load 'rnmamod' library :-) (Only ONCE after running 'load_all()' for the first time in that day)
library(rnmamod)
## Use example in excel format
library(readxl)
#(data.fas <- as.data.frame(read_excel("D:/Ongoing Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
(data.fas <- as.data.frame(read_excel("O:/Research Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
# Vector of unique intervention names
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
## Load libraries
list.of.packages <- c("devtools", "R2jags", "ggplot2", "dplyr", "mcmcplots", "reshape2", "ggfittext", "gemtc", "netmeta",
"BUGSnet", "pcnetmeta", "gridExtra", "stringr", "ggpubr", "ggrepel", "testit", "writexl")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load all package material
devtools::load_all()
## Load 'rnmamod' library :-) (Only ONCE after running 'load_all()' for the first time in that day)
library(rnmamod)
## Use example in excel format
library(readxl)
(data.fas <- as.data.frame(read_excel("D:/Ongoing Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
#(data.fas <- as.data.frame(read_excel("O:/Research Projects/19.008_NMA pulpotomy (Fasoulas-Pandis)/31_Dataset/Data extraction NMA2.xlsx", na = "NA", sheet = "Dataset")[, c(15:17, 22:27, 32:37)]))
colnames(data.fas) <- c("t1", "t2", "t3", "arm1", "arm2", "arm3", "n1", "n2", "n3", "r1", "r2", "r3", "m1", "m2", "m3")
# Vector of unique intervention names
(interv.names <- na.omit(unique(unlist(data.fas[, 4:6]))))
## Network plots and summary (use BUGSnet for network characteristics)
rnmamod::netplot(data.fas, drug.names = interv.names, show.bias = T)
## Network plots and summary (use BUGSnet for network characteristics)
rnmamod::netplot(data.fas, drug.names = interv.names, show.bias = T)
## Network plots and summary (use BUGSnet for network characteristics)
rnmamod::netplot(data.fas, drug.names = interv.names, show.bias = F)
## Heatmap of trials to interventions with the risk of bias due to MOD
rnmamod::heatmap.mod(data = data.fas, trial.names = as.factor(1:21), drug.names = interv.names)
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 10000, n.burnin = 1000, n.thin = 1))
## Perform NMA-PMM using optional arguments only
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR",  heter.prior = list("halfnormal", 0, 1), D = 0))
## Perform NMA-PMM using optional arguments only
(res1 <- rnmamod::run.model(data = data.fas, measure = "OR",  heter.prior = list("halfnormal", 0, 1), D = 0))
## Run separate RE-MA for comparisons with at least two trials (save EM and tau)
(meta1 <- rnmamod::run.separate.meta(data = data.fas, measure = "OR",  heter.prior = list("uniform", 0, 5)))
## Present results from the separate RE-MAs and corresponding NMA results
rnmamod::separate.meta.plot(full = res1, meta = meta1, drug.names = interv.names)
## Obtain the league heatmap
rnmamod::league.heatmap(res1, drug.names = interv.names)
## Load libraries
list.of.packages <- c("devtools", "R2jags", "ggplot2", "dplyr", "mcmcplots", "reshape2", "ggfittext", "gemtc", "netmeta",
"BUGSnet", "pcnetmeta", "gridExtra", "stringr", "ggpubr", "ggrepel", "testit", "writexl")
lapply(list.of.packages, require, character.only = T); rm(list.of.packages)
## Load all package material
devtools::load_all()
devtools::document()
library(rnmamod)
load("./data/NMA Dataset Binary.RData")                  # Binary NMAs
(data1 <- as.data.frame(one.stage.dataset.NMA[[3]]))
(interv.names <- c("A", "B", "C", "D", "E", "F", "G", "H"))
rnmamod::netplot(data1[, -17], drug.names = interv.names, show.bias = F) # data[, -17] excludes the column on the number of arms; it is data[, -21] for continuous
rnmamod::netplot(data1[, -17], drug.names = interv.names, show.bias = T) # data[, -17] excludes the column on the number of arms; it is data[, -21] for continuous
rnmamod::heatmap.mod(data = data1[, -17], trial.names = as.factor(1:62), drug.names = interv.names)
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 1, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1))
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
rnmamod::mcmc.diagnostics(par = c("tau", "EM[2,1]", "EM[3,1]"), data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, D = 1, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1)
(meta1 <- rnmamod::run.separate.meta(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5)))
rnmamod::separate.meta.plot(full = res1, meta = meta1, drug.names = interv.names)
rnmamod::league.heatmap(res1, drug.names = interv.names)
## Obtain the league heatmap for predictions (lower triangle) and effect estimates (upper triangle)
rnmamod::league.heatmap.pred(res1, drug.names = interv.names)
rnmamod::rankosucra.plot(res1, drug.names = interv.names)
rnmamod::forestplot.ref(res1, drug.names = interv.names)
(node1 <- rnmamod::run.nodesplit(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)
(res.sens <- rnmamod::run.sensitivity(data = data1, measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), var.misspar = 1, D = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
drug.names.alloc(drug.names = interv.names)
rnmamod::balloon.plot.mod(sens = res.sens, compar = 1, outcome = "binary", D = 1, drug.names = interv.names)
(robust <- rnmamod::robustness.index(sens = res.sens, primary.scenar = 13, threshold = 0.28, nt = length(interv.names)))
rnmamod::heatmap.robustness(robust = robust, drug.names = interv.names, threshold = 0.28)
# Use the function 'drug.names.alloc(drug.names)' to define the argument 'compar'
rnmamod::barplot.KLD(robust = robust, compar = 1, outcome = "binary", drug.names = interv.names)
(reg1 <- rnmamod::run.metareg(data = data1[, -17], covariate = rnorm(62, 0, 1), measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, D = 0, n.chains = 3, n.iter = 1000, n.burnin = 100, n.thin = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
A = 1;    B = 2;    C = 3;    D = 4
z<-list(MacKinnon=A,regression=B,proof=C, res=D)
z
z[-$MacKinnon]
z[-MacKinnon]
z[-1]
myfunction <- function(){
A = 1;    B = 2;    C = 3;    D = 4
z<-list(MacKinnon=A,regression=B,proof=C, res=D)
print(z[-1])
return(invisible(z))
}
myfunction()
output <-list(EM = EM, EM.ref = EM.ref, EM.pred = EM.pred, pred.ref = pred.ref, tau = tau, SUCRA = SUCRA, delta = delta, dev.m = dev.m, dev.o = dev.o, hat.m = hat.m, hat.par = hat.par, leverage.o = leverage.o, sign.dev.o = sign.dev.o, leverage.m = leverage.m, sign.dev.m = sign.dev.m, effectiveness = effectiveness, phi = phi, model.assessment = model.assessment, jagsfit = jagsfit)
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
res1$jagsfit$summary
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
res1$jagsfit
## Load all package material
devtools::load_all()
(res1 <- rnmamod::run.model(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5),  D = 1))
(meta1 <- rnmamod::run.separate.meta(data = data1[, -17], measure = "OR",  heter.prior = list("uniform", 0, 5)))
rnmamod::separate.meta.plot(full = res1, meta = meta1, drug.names = interv.names)
rnmamod::league.heatmap(res1, drug.names = interv.names)
rnmamod::forestplot.ref(res1, drug.names = interv.names)
(node1 <- rnmamod::run.nodesplit(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("uniform", 0, 2), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 1000, n.burnin = 100, n.thin = 1))
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
(ume1 <- rnmamod::run.UME(data = data1[, -17], measure = "OR", assumption = "IDE-ARM", heter.prior = list("halfnormal", 0, 1), mean.misspar = 0, var.misspar = 1, n.chains = 2, n.iter = 10000, n.burnin = 1000, n.thin = 1))
rnmamod::UME.plot(res1, ume1, drug.names = interv.names)
devtools::load_all()
rnmamod::nodesplit.plot(node1, res1, drug.names = interv.names)
reg1
